{"version":3,"sources":["http-common.js","services/servicios.service.js","components/servicios.component.js","components/principal.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","ProductList","props","retrieveProductos","bind","refreshList","state","productos","currentProducto","currentIndex","searchTitle","this","PrincipalDataService","findAll","then","response","setState","data","console","log","catch","e","class","for","map","producto","nombre","EAN","precioKG","cantidadP","cantidadV","type","value","id","Component","PrincipalPage","role","data-bs-dismiss","aria-label","aria-hidden","App","href","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4OAEeA,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,wBACTC,QAAS,CACP,eAAgB,sBCKL,M,uFANb,WACE,OAAOC,EAAKC,IAAI,qB,aCDCC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAEnB,EAAKE,MAAQ,CACXC,UAAW,GACXC,gBAAiB,KACjBC,cAAe,EACfC,YAAa,IATE,E,qDAanB,WACEC,KAAKR,sB,+BAIP,WAAqB,IAAD,OAClBS,EAAqBC,UAClBC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZT,UAAWQ,EAASE,OAEtBC,QAAQC,IAAIJ,EAASE,SAEtBG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,Q,yBAIlB,WACEV,KAAKR,oBACLQ,KAAKK,SAAS,CACZR,gBAAiB,KACjBC,cAAe,M,oBAKnB,WACE,MAAmCE,KAAKL,MAAjCC,EAAP,EAAOA,UAAP,EAAkBE,aAElB,OACI,+BACY,iCACM,2DACA,qBAAKa,MAAM,OAAX,SACE,uBAAOC,IAAI,oBAAoBD,MAAM,aAArC,mCAEF,uBAAOA,MAAM,+CAAb,SACE,kCACE,+BACE,iDACA,qCACA,iDACA,oDACA,qDAEDf,GAAaA,EAAUiB,KAAI,SAACC,GAAD,OAC5B,+BACE,6BAAKA,EAASC,SACd,6BAAKD,EAASE,MACd,mCAAMF,EAASG,YACf,6BAAKH,EAASI,YACd,6BAAKJ,EAASK,uBAOpB,qBAAKR,MAAM,OAAX,SACE,sBAAKA,MAAM,aAAX,UACI,uBAAOA,MAAM,mBAAmBS,KAAK,WAAWC,MAAM,GAAGC,GAAG,qBAC5D,uBAAOX,MAAM,mBAAmBC,IAAI,mBAApC,qDAKN,wBAAQQ,KAAK,SAAST,MAAM,kBAA5B,yC,GAjFeY,aCDpBC,E,4JACjB,WAEI,OACI,iCACG,sBAAKb,MAAM,kDAAkDc,KAAK,QAAlE,UACC,gEADD,sEAEC,wBAAQL,KAAK,SAAST,MAAM,QAAQe,kBAAgB,QAAQC,aAAW,QAAvE,SACA,sBAAMC,cAAY,OAAlB,uBAIJ,sBAAMH,KAAK,OAAOd,MAAM,cAAcW,GAAG,UAAzC,SACI,iCACI,oBAAIX,MAAM,gBAAV,0CACA,mBAAGA,MAAM,OAAT,mF,GAfuBY,aCyC5BM,E,4JArCb,WACI,OACA,qBAAKlB,MAAO,cAAZ,SACE,sBAAKA,MAAM,kDAAX,UACE,wBAAQA,MAAM,cAAd,SACQ,sBAAKA,MAAM,QAAX,UACA,oBAAIA,MAAM,kBAAV,SACE,mBAAGmB,KAAK,aAAaC,UAAU,eAA/B,4BAIA,sBAAKpB,MAAM,0CAAX,UACG,mBAAGA,MAAM,kBAAT,SACG,cAAC,IAAD,CAAMqB,GAAI,aAAV,yBAIF,mBAAGrB,MAAM,kBAAT,SACE,cAAC,IAAD,CAAMqB,GAAI,aAAV,iCAOhB,qBAAKD,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAM,CAAC,IAAK,cAAeC,UAAW7C,IACnD,cAAC,IAAD,CAAO2C,OAAK,EAACC,KAAM,CAAC,IAAK,cAAeC,UAAWX,kB,GA7B/CD,aCKEa,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCVRC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDuHlB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnB5C,MAAK,SAAA6C,GACFA,EAAaC,gBAEhBxC,OAAM,SAAAyC,GACH3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.3104e53d.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8000\", //You can change the baseURL that depends on REST APIs url that your Server configures.\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","//Desde aca se exporta el servicio y las funciones se corresponden a metodos axios permiten hacer http requests con operaciones crud\r\nimport http from \"../http-common\";\r\n\r\nclass PrincipalDataService {\r\n  findAll() {\r\n    return http.get(\"/getProductos\");\r\n  }\r\n\r\n}\r\n\r\nexport default new PrincipalDataService();","import React, { Component } from \"react\";\r\nimport PrincipalDataService from \"../services/servicios.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class ProductList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.retrieveProductos = this.retrieveProductos.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n\r\n    this.state = {\r\n      productos: [],\r\n      currentProducto: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveProductos();\r\n  }\r\n\r\n\r\n  retrieveProductos() {\r\n    PrincipalDataService.findAll()\r\n      .then(response => {\r\n        this.setState({\r\n          productos: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveProductos();\r\n    this.setState({\r\n      currentProducto: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {productos, currentIndex } = this.state;\r\n\r\n    return (\r\n        <main >\r\n                    <form>    \r\n                          <legend>Declaración Jurada</legend>\r\n                          <div class=\"mb-3\">\r\n                            <label for=\"disabledTextInput\" class=\"form-label\">CUIT: 23-42450167-5</label>\r\n                          </div>\r\n                          <table class=\"table table-stripped table-bordered table-sm\">\r\n                            <tbody>\r\n                              <tr>\r\n                                <td>Nombre Producto</td>\r\n                                <td>EAN</td>\r\n                                <td>Precio Unitario</td>\r\n                                <td>Cantidad Producida</td>\r\n                                <td>Cantidad Vendida</td>\r\n                              </tr>\r\n                              {productos && productos.map((producto) => (\r\n                              <tr>\r\n                                <td>{producto.nombre}</td>\r\n                                <td>{producto.EAN}</td>\r\n                                <td>${producto.precioKG}</td>\r\n                                <td>{producto.cantidadP}</td>\r\n                                <td>{producto.cantidadV}</td>\r\n                              </tr> \r\n                                ))}\r\n\r\n                            </tbody>\r\n                          </table>\r\n\r\n                          <div class=\"mb-3\">\r\n                            <div class=\"form-check\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\"/>\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">\r\n                                  JURO QUE ESTOS DATOS SON CORRECTOS\r\n                                </label>\r\n                            </div>\r\n                          </div>\r\n                          <button type=\"submit\" class=\"btn btn-primary\">Enviar Declaracion</button>                \r\n                      </form>\r\n          </main>\r\n    \r\n      );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class PrincipalPage extends Component {\r\n    render() {\r\n    \r\n        return (\r\n            <main>\r\n               <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n                <strong>¡Fecha límite cerca!</strong> La secretaría informo acerca de la tardanza para entregar la DJ\r\n                <button type=\"button\" class=\"close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n\r\n            <main role=\"main\" class=\"inner cover\" id=\"central\" >\r\n                <main>\r\n                    <h1 class=\"cover-heading\">Una empresa que vende ripio.</h1>\r\n                    <p class=\"lead\">Vendemos un par de cosas mas, pero tambien tenemos ripio.</p>\r\n                </main>\r\n            </main>          \r\n            </main>\r\n        \r\n          );\r\n      }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport { Link, Switch, Route } from \"react-router-dom\";\r\nimport ProductList from './components/servicios.component'\r\nimport PrincipalPage from \"./components/principal.component\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n      return (\r\n      <div class= \"text-center\">\r\n        <div class=\"cover-container d-flex h-100 p-3 mx flex-column\">\r\n          <header class=\"masthead mb\">\r\n                  <div class=\"inner\">\r\n                  <h4 class=\"masthead-brand \">\r\n                    <a href=\"/principal\" className=\"navbar-brand\">\r\n                         Corralon Nak\r\n                    </a>\r\n                    </h4>\r\n                    <nav class=\"nav nav-masthead justify-content-center\">\r\n                       <a class=\"nav-link active\">\r\n                          <Link to={\"/principal\"}>\r\n                              Principal\r\n                         </Link>\r\n                       </a>\r\n                        <a class=\"nav-link active\">\r\n                          <Link to={\"/servicios\"}>\r\n                              Servicios\r\n                          </Link>\r\n                       </a>\r\n                  </nav>\r\n                  </div>\r\n              </header>        \r\n          <div className=\"container mt-3\">\r\n            <Switch>\r\n              <Route exact path={[\"/\", \"/servicios\"]} component={ProductList} />\r\n              <Route exact path={[\"/\", \"/principal\"]} component={PrincipalPage} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}