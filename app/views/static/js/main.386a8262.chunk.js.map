{"version":3,"sources":["http-common.js","services/servicios.service.js","components/servicios.component.js","services/principal.service.js","components/principal.component.js","components/login.component.js","components/logout.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","ProductList","props","retrieveProductos","bind","refreshList","state","productos","currentProducto","currentIndex","searchTitle","this","PrincipalDataService","findAll","then","response","setState","data","console","log","catch","e","class","for","map","producto","nombre","EAN","precioKG","cantidadP","cantidadV","type","value","id","Component","require","localStorage","clear","PrincipalPage","tok","getItem","role","LoginButton","loginWithRedirect","useAuth0","onClick","LogoutButton","logout","returnTo","window","location","origin","App","isAuthenticated","href","to","exact","path","component","Login","className","Boolean","hostname","match","ReactDOM","render","StrictMode","domain","clientId","redirectUri","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.386a8262.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8000\", //You can change the baseURL that depends on REST APIs url that your Server configures.\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","//Desde aca se exporta el servicio y las funciones se corresponden a metodos axios permiten hacer http requests con operaciones crud\r\nimport http from \"../http-common\";\r\n\r\nclass PrincipalDataService {\r\n  findAll() {\r\n    return http.get(\"/getProductos\");\r\n  }\r\n\r\n}\r\n\r\nexport default new PrincipalDataService();","import React, { Component } from \"react\";\r\nimport PrincipalDataService from \"../services/servicios.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class ProductList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.retrieveProductos = this.retrieveProductos.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n\r\n    this.state = {\r\n      productos: [],\r\n      currentProducto: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveProductos();\r\n  }\r\n\r\n\r\n  retrieveProductos() {\r\n    PrincipalDataService.findAll()\r\n      .then(response => {\r\n        this.setState({\r\n          productos: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveProductos();\r\n    this.setState({\r\n      currentProducto: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {productos, currentIndex } = this.state;\r\n    return (\r\n        <main >\r\n                    <form>    \r\n                          <legend>Declaración Jurada</legend>\r\n                          <div class=\"mb-3\">\r\n                            <label for=\"disabledTextInput\" class=\"form-label\">CUIT: 23-42450167-5</label>\r\n                          </div>\r\n                          <table class=\"table table-stripped table-bordered table-sm\">\r\n                            <tbody>\r\n                              <tr>\r\n                                <td>Nombre Producto</td>\r\n                                <td>EAN</td>\r\n                                <td>Precio Unitario</td>\r\n                                <td>Cantidad Producida</td>\r\n                                <td>Cantidad Vendida</td>\r\n                              </tr>\r\n                              {productos && productos.map((producto) => (\r\n                              <tr>\r\n                                <td>{producto.nombre}</td>\r\n                                <td>{producto.EAN}</td>\r\n                                <td>${producto.precioKG}</td>\r\n                                <td>{producto.cantidadP}</td>\r\n                                <td>{producto.cantidadV}</td>\r\n                              </tr> \r\n                                ))}\r\n\r\n                            </tbody>\r\n                          </table>\r\n\r\n                          <div class=\"mb-3\">\r\n                            <div class=\"form-check\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\"/>\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">\r\n                                  JURO QUE ESTOS DATOS SON CORRECTOS\r\n                                </label>\r\n                            </div>\r\n                          </div>\r\n                          <button type=\"submit\" class=\"btn btn-primary\">Enviar Declaracion</button>                \r\n                      </form>\r\n          </main>\r\n    \r\n      );\r\n  }\r\n}\r\n","//Desde aca se exporta el servicio y las funciones se corresponden a metodos axios permiten hacer http requests con operaciones crud\r\nimport http from \"../http-common\";\r\n\r\n\r\nclass PrincipalService {\r\n  getNotificacion() {\r\n    console.log(\"holamundo\");\r\n}\r\n}\r\nexport default new PrincipalService();","import React, { Component } from \"react\";\r\nimport '../App.css'\r\nimport PrincipalService from \"../services/principal.service\";\r\nimport { Link } from \"react-router-dom\";\r\nconst empresas = require('dacs-empresas');\r\nconst api_login = 'https://cli-serv-grupo1.herokuapp.com/api/auth/login'\r\n\r\nlocalStorage.clear();\r\n\r\nfunction prueba() {\r\n  empresas.loginMinisterio(api_login, \"benjamin.kugler1996@gmail.com\",\"123456\").then().then(tkn => localStorage.setItem(\"token\", tkn));\r\n  console.log(localStorage.getItem(\"token\"));\r\n}\r\nexport default class PrincipalPage extends Component {\r\n  \r\n    render() {\r\n        const {tok} = localStorage.getItem(\"token\")\r\n        return (\r\n            <main>\r\n               <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n                <strong>¡Fecha límite cerca!</strong>\r\n                                {tok}\r\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                \r\n                </div>\r\n\r\n            <main role=\"main\" class=\"inner cover\" id=\"central\" >\r\n                <main>\r\n                    <h1 class=\"cover-heading\">Una empresa que vende ripio.</h1>\r\n                    <p class=\"lead\">Vendemos un par de cosas mas, pero tambien tenemos ripio.</p>\r\n                </main>\r\n            </main>          \r\n            </main>\r\n        \r\n          );\r\n      }\r\n}\r\n","import React from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nexport const LoginButton = () => {\r\n  const { loginWithRedirect } = useAuth0();\r\n\r\n  return <button  class=\"btn btn-outline-secondary btn-sm\"  onClick={() => loginWithRedirect()}>\r\n      Iniciar sesion\r\n      </button>;\r\n};\r\nexport default LoginButton;\r\n\r\n","import React from \"react\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nexport const LogoutButton = () => {\r\n  const { logout } = useAuth0();\r\n\r\n  return (\r\n    <button  class=\"btn btn-outline-secondary btn-sm\" onClick={() => logout({ returnTo: window.location.origin })}>\r\n      Cerrar sesion\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default LogoutButton;","\r\nimport React, { Component } from \"react\";\r\nimport './App.css';\r\nimport { Link, Switch, Route } from \"react-router-dom\";\r\nimport ProductList from './components/servicios.component'\r\nimport PrincipalPage from \"./components/principal.component\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport Login from \"./components/login.component\";\r\nimport {LoginButton} from './components/login.component'\r\nimport {LogoutButton} from \"./components/logout.component\";\r\n\r\n\r\nfunction App() {\r\n  const{ isAuthenticated } = useAuth0();\r\n    \r\n    return (\r\n      \r\n<div>\r\n\r\n  <header class=\"navbar navbar-expand-md navbar-dark bd-navbar\">\r\n    <nav class=\"navbar navbar-expand-lg navbar-light \"> \r\n        <div class=\"container-fluid\">\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">               \r\n              <h4 class=\"\">\r\n                <a href=\"/principal\" class=\"h4\">\r\n                      Corralon Nak\r\n                </a>\r\n              </h4>\r\n              <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\"> \r\n                    {isAuthenticated ? (\r\n                    <>  \r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link active\">\r\n                    <Link to={\"/principal\"}>\r\n                      Principal\r\n                    </Link>\r\n                  </a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link active\">\r\n                    <Link to={\"/servicios\"}>\r\n                        Servicios\r\n                    </Link>\r\n                  </a> \r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <LogoutButton/> \r\n                </li>\r\n                  </>\r\n                  ) : (\r\n                    <li class=\"nav-item\">\r\n                    <Route exact path={[\"/\", \"/login\" ]}component={Login} />\r\n                    </li>\r\n                  )}\r\n              </ul>\r\n            </div>\r\n      </div>\r\n    </nav>\r\n  </header> \r\n  <div className=\"container mt-3\">\r\n    <Switch>\r\n      <Route exact path={[\"/servicios\"]} component={ProductList} />\r\n      <Route exact path={[\"/principal\"]} component={PrincipalPage} />\r\n    </Switch>\r\n  </div>\r\n  <footer class=\"mastfoot mt-auto text-center\">\r\n      <div class=\"inner\">\r\n          <p>Pagina para la empresa <a href=\"https://getbootstrap.com/\">Los enripiadores</a>, by <a href=\"https://cdn.memegenerator.es/imagenes/memes/full/31/39/31392168.jpg\">Grupo8</a>.</p>\r\n      </div>\r\n  </footer>  \r\n</div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Auth0Provider } from '@auth0/auth0-react'\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <React.StrictMode>\r\n      <Auth0Provider \r\n      domain=\"grupo8-tpi.us.auth0.com\" \r\n      clientId=\"CXKqDkfXlEjROqsE4X6vTvElHHuqYBxc\" \r\n      redirectUri={window.location.origin}>\r\n        <App />\r\n      </Auth0Provider>\r\n    </React.StrictMode>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}