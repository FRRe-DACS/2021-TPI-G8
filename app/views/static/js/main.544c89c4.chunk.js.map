{"version":3,"sources":["services/auth.service.js","http-common.js","services/servicios.service.js","components/servicios.component.js","services/principal.service.js","components/principal.component.js","components/login.component.js","App.js","serviceWorker.js","index.js"],"names":["username","password","axios","post","API_URL","then","response","data","accessToken","localStorage","setItem","JSON","stringify","parse","getItem","create","baseURL","headers","http","get","ProductList","props","retrieveProductos","bind","refreshList","state","productos","currentProducto","currentIndex","searchTitle","this","PrincipalDataService","findAll","setState","console","log","catch","e","class","for","map","producto","nombre","EAN","precioKG","cantidadP","cantidadV","type","value","id","Component","PrincipalPage","retrieveNotificaciones","notificaciones","PrincipalService","getNotificacion","role","notificacion","data-bs-dismiss","aria-label","aria-hidden","Login","handleLogin","onChangeUsername","onChangePassword","loading","message","target","preventDefault","form","validateAll","checkBtn","context","_errors","length","AuthService","login","history","push","window","location","reload","error","resMessage","toString","divStyle","color","className","src","alt","onSubmit","ref","c","style","htmlFor","name","onChange","disabled","display","App","showServicios","showPrincipal","getCurrentUser","user","href","to","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAwBe,M,qFAnBb,SAAMA,EAAUC,GACd,OAAOC,IACJC,KAAKC,wCAAoB,CACxBJ,WACAC,aAEDI,MAAK,SAAAC,GAKJ,OAJIA,EAASC,KAAKC,aAChBC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUN,EAASC,OAGhDD,EAASC,U,4BAGtB,WACE,OAAOI,KAAKE,MAAMJ,aAAaK,QAAQ,a,qBClB5BZ,MAAMa,OAAO,CAC1BC,QAAS,wBACTC,QAAS,CACP,eAAgB,sBCKL,M,uFANb,WACE,OAAOC,EAAKC,IAAI,qB,aCDCC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAEnB,EAAKE,MAAQ,CACXC,UAAW,GACXC,gBAAiB,KACjBC,cAAe,EACfC,YAAa,IATE,E,qDAanB,WACEC,KAAKR,sB,+BAIP,WAAqB,IAAD,OAClBS,EAAqBC,UAClB3B,MAAK,SAAAC,GACJ,EAAK2B,SAAS,CACZP,UAAWpB,EAASC,OAEtB2B,QAAQC,IAAI7B,EAASC,SAEtB6B,OAAM,SAAAC,GACLH,QAAQC,IAAIE,Q,yBAIlB,WACEP,KAAKR,oBACLQ,KAAKG,SAAS,CACZN,gBAAiB,KACjBC,cAAe,M,oBAKnB,WACE,MAAmCE,KAAKL,MAAjCC,EAAP,EAAOA,UAAP,EAAkBE,aAClB,OACI,+BACY,iCACM,2DACA,qBAAKU,MAAM,OAAX,SACE,uBAAOC,IAAI,oBAAoBD,MAAM,aAArC,mCAEF,uBAAOA,MAAM,+CAAb,SACE,kCACE,+BACE,iDACA,qCACA,iDACA,oDACA,qDAEDZ,GAAaA,EAAUc,KAAI,SAACC,GAAD,OAC5B,+BACE,6BAAKA,EAASC,SACd,6BAAKD,EAASE,MACd,mCAAMF,EAASG,YACf,6BAAKH,EAASI,YACd,6BAAKJ,EAASK,uBAOpB,qBAAKR,MAAM,OAAX,SACE,sBAAKA,MAAM,aAAX,UACI,uBAAOA,MAAM,mBAAmBS,KAAK,WAAWC,MAAM,GAAGC,GAAG,qBAC5D,uBAAOX,MAAM,mBAAmBC,IAAI,mBAApC,qDAKN,wBAAQQ,KAAK,SAAST,MAAM,kBAA5B,yC,GAhFeY,aCM1B,M,+FANb,WACE,OAAOhC,EAAKC,IAAI,wB,MCDCgC,E,kDACrB,WAAY9B,GAAQ,IAAD,8BACf,cAAMA,IACD+B,uBAAyB,EAAKA,uBAAuB7B,KAA5B,gBAE9B,EAAKE,MAAQ,CACT4B,eAAgB,IALL,E,qDAQnB,WACIvB,KAAKsB,2B,oCAGT,WAAyB,IAAD,OACpBE,EAAiBC,kBAChBlD,MAAK,SAAAC,GACF,EAAK2B,SAAS,CACVoB,eAAgB/C,EAASC,OAE7B2B,QAAQC,IAAI7B,EAASC,SAExB6B,OAAM,SAAAC,GACHH,QAAQC,IAAIE,Q,oBAIhB,WACI,IAAOgB,EAAkBvB,KAAKL,MAAvB4B,eAEP,OACI,iCACG,sBAAKf,MAAM,kDAAkDkB,KAAK,QAAlE,UACC,gEACqBH,GAAkBA,EAAeb,KAAI,SAACiB,GAAD,MAClC,CAACA,mBAErB,wBAAQV,KAAK,SAAST,MAAM,QAAQoB,kBAAgB,QAAQC,aAAW,QAAvE,SACI,sBAAMC,cAAY,OAAlB,uBAIZ,sBAAMJ,KAAK,OAAOlB,MAAM,cAAcW,GAAG,UAAzC,SACI,iCACI,oBAAIX,MAAM,gBAAV,0CACA,mBAAGA,MAAM,OAAT,mF,GA5CuBY,a,mDCEtBW,E,kDACnB,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IACDyC,YAAc,EAAKA,YAAYvC,KAAjB,gBACnB,EAAKwC,iBAAmB,EAAKA,iBAAiBxC,KAAtB,gBACxB,EAAKyC,iBAAmB,EAAKA,iBAAiBzC,KAAtB,gBAExB,EAAKE,MAAQ,CACXzB,SAAU,GACVC,SAAU,GACVgE,SAAS,EACTC,QAAS,IAVM,E,oDAcnB,SAAiB7B,GACfP,KAAKG,SAAS,CACZjC,SAAUqC,EAAE8B,OAAOnB,U,8BAIvB,SAAiBX,GACfP,KAAKG,SAAS,CACZhC,SAAUoC,EAAE8B,OAAOnB,U,yBAIvB,SAAYX,GAAI,IAAD,OACbA,EAAE+B,iBAEFtC,KAAKG,SAAS,CACZiC,QAAS,GACTD,SAAS,IAGXnC,KAAKuC,KAAKC,cAEmC,IAAzCxC,KAAKyC,SAASC,QAAQC,QAAQC,OAChCC,EAAYC,MAAM9C,KAAKL,MAAMzB,SAAU8B,KAAKL,MAAMxB,UAAUI,MAC1D,WACE,EAAKgB,MAAMwD,QAAQC,KAAK,YACxBC,OAAOC,SAASC,YAElB,SAAAC,GACE,IAAMC,EACHD,EAAM5E,UACL4E,EAAM5E,SAASC,MACf2E,EAAM5E,SAASC,KAAK2D,SACtBgB,EAAMhB,SACNgB,EAAME,WAER,EAAKnD,SAAS,CACZgC,SAAS,EACTC,QAASiB,OAKfrD,KAAKG,SAAS,CACZgC,SAAS,M,oBAKf,WAAU,IAAD,OACDoB,EAAW,CACbC,MAAO,SAEX,OACE,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,qBACEC,IAAI,8CACJC,IAAI,cACJF,UAAU,qBAGZ,eAAC,IAAD,CACEG,SAAU5D,KAAKgC,YACf6B,IAAK,SAAAC,GACH,EAAKvB,KAAOuB,GAHhB,UAME,sBAAKL,UAAU,aAAf,UACE,uBAAOM,MAAOR,EAAUS,QAAQ,WAAhC,+BACA,cAAC,IAAD,CACE/C,KAAK,OACLwC,UAAU,eACVQ,KAAK,WACL/C,MAAOlB,KAAKL,MAAMzB,SAClBgG,SAAUlE,KAAKiC,sBAInB,sBAAKwB,UAAU,aAAf,UACE,uBAAOM,MAAOR,EAAUS,QAAQ,WAAhC,2BACA,cAAC,IAAD,CACE/C,KAAK,WACLwC,UAAU,eACVQ,KAAK,WACL/C,MAAOlB,KAAKL,MAAMxB,SAClB+F,SAAUlE,KAAKkC,sBAInB,qBAAKuB,UAAU,aAAf,SACE,yBACEA,UAAU,4BACVU,SAAUnE,KAAKL,MAAMwC,QAFvB,UAIGnC,KAAKL,MAAMwC,SACV,sBAAMsB,UAAU,qCAElB,uDAIHzD,KAAKL,MAAMyC,SACV,qBAAKqB,UAAU,aAAf,SACE,qBAAKA,UAAU,qBAAqB/B,KAAK,QAAzC,SACG1B,KAAKL,MAAMyC,YAIlB,cAAC,IAAD,CACE2B,MAAO,CAAEK,QAAS,QAClBP,IAAK,SAAAC,GACH,EAAKrB,SAAWqB,iB,GA/HG1C,aCmEpBiD,E,kDA/Db,WAAY9E,GAAQ,IAAD,8BACjB,cAAMA,IAEDI,MAAQ,CACX2E,eAAe,EACfC,eAAe,GALA,E,qDAQnB,WACe1B,EAAY2B,mB,gBAE3B,SAAIC,GACFzE,KAAKG,SAAS,CACZmE,cAAeG,EACfF,cAAeE,M,oBAKnB,WACE,MAAyCzE,KAAKL,MAAtC4E,EAAR,EAAQA,cAAeD,EAAvB,EAAuBA,cACrB,OAEA,qBAAK9D,MAAO,cAAZ,SACE,sBAAKA,MAAM,kDAAX,UACE,wBAAQA,MAAM,cAAd,SACQ,sBAAKA,MAAM,QAAX,UACA,oBAAIA,MAAM,kBAAV,SACE,mBAAGkE,KAAK,aAAajB,UAAU,eAA/B,4BAIA,sBAAKjD,MAAM,0CAAX,UACC+D,GACE,mBAAG/D,MAAM,kBAAT,SACG,cAAC,IAAD,CAAMmE,GAAI,aAAV,yBAKLL,GACG,mBAAG9D,MAAM,kBAAT,SACE,cAAC,IAAD,CAAMmE,GAAI,aAAV,iCAQhB,qBAAKlB,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmB,OAAK,EAACC,KAAM,CAAC,cAAeC,UAAWxF,IAC9C,cAAC,IAAD,CAAOsF,OAAK,EAACC,KAAM,CAAC,cAAeC,UAAWzD,IAC9C,cAAC,IAAD,CAAOuD,OAAK,EAACC,KAAM,CAAC,IAAK,UAAWC,UAAW/C,kB,GAvD3CX,aCEE2D,QACa,cAA7B9B,OAAOC,SAAS8B,UAEa,UAA7B/B,OAAOC,SAAS8B,UAEhB/B,OAAOC,SAAS8B,SAASC,MACrB,2DCVRC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDuHlB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBjH,MAAK,SAAAkH,GACFA,EAAaC,gBAEhBpF,OAAM,SAAA8C,GACHhD,QAAQgD,MAAMA,EAAMhB,c","file":"static/js/main.544c89c4.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8000/api/auth/\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + \"signin\", {\r\n        username,\r\n        password\r\n      })\r\n      .then(response => {\r\n        if (response.data.accessToken) {\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n  getCurrentUser() {\r\n    return JSON.parse(localStorage.getItem('user'));;\r\n  }\r\n}\r\n\r\nexport default new AuthService();","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:8000\", //You can change the baseURL that depends on REST APIs url that your Server configures.\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","//Desde aca se exporta el servicio y las funciones se corresponden a metodos axios permiten hacer http requests con operaciones crud\r\nimport http from \"../http-common\";\r\n\r\nclass PrincipalDataService {\r\n  findAll() {\r\n    return http.get(\"/getProductos\");\r\n  }\r\n\r\n}\r\n\r\nexport default new PrincipalDataService();","import React, { Component } from \"react\";\r\nimport PrincipalDataService from \"../services/servicios.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class ProductList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.retrieveProductos = this.retrieveProductos.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n\r\n    this.state = {\r\n      productos: [],\r\n      currentProducto: null,\r\n      currentIndex: -1,\r\n      searchTitle: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveProductos();\r\n  }\r\n\r\n\r\n  retrieveProductos() {\r\n    PrincipalDataService.findAll()\r\n      .then(response => {\r\n        this.setState({\r\n          productos: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveProductos();\r\n    this.setState({\r\n      currentProducto: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const {productos, currentIndex } = this.state;\r\n    return (\r\n        <main >\r\n                    <form>    \r\n                          <legend>Declaraci√≥n Jurada</legend>\r\n                          <div class=\"mb-3\">\r\n                            <label for=\"disabledTextInput\" class=\"form-label\">CUIT: 23-42450167-5</label>\r\n                          </div>\r\n                          <table class=\"table table-stripped table-bordered table-sm\">\r\n                            <tbody>\r\n                              <tr>\r\n                                <td>Nombre Producto</td>\r\n                                <td>EAN</td>\r\n                                <td>Precio Unitario</td>\r\n                                <td>Cantidad Producida</td>\r\n                                <td>Cantidad Vendida</td>\r\n                              </tr>\r\n                              {productos && productos.map((producto) => (\r\n                              <tr>\r\n                                <td>{producto.nombre}</td>\r\n                                <td>{producto.EAN}</td>\r\n                                <td>${producto.precioKG}</td>\r\n                                <td>{producto.cantidadP}</td>\r\n                                <td>{producto.cantidadV}</td>\r\n                              </tr> \r\n                                ))}\r\n\r\n                            </tbody>\r\n                          </table>\r\n\r\n                          <div class=\"mb-3\">\r\n                            <div class=\"form-check\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"flexCheckDefault\"/>\r\n                                <label class=\"form-check-label\" for=\"flexCheckDefault\">\r\n                                  JURO QUE ESTOS DATOS SON CORRECTOS\r\n                                </label>\r\n                            </div>\r\n                          </div>\r\n                          <button type=\"submit\" class=\"btn btn-primary\">Enviar Declaracion</button>                \r\n                      </form>\r\n          </main>\r\n    \r\n      );\r\n  }\r\n}\r\n","//Desde aca se exporta el servicio y las funciones se corresponden a metodos axios permiten hacer http requests con operaciones crud\r\nimport http from \"../http-common\";\r\n\r\nclass PrincipalService {\r\n  getNotificacion() {\r\n    return http.get(\"/getNotificacion\");\r\n  }\r\n\r\n}\r\n\r\nexport default new PrincipalService();","import React, { Component } from \"react\";\r\nimport PrincipalService from \"../services/principal.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class PrincipalPage extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    this.retrieveNotificaciones = this.retrieveNotificaciones.bind(this);\r\n      \r\n    this.state = {\r\n        notificaciones: []\r\n    };\r\n}\r\ncomponentDidMount(){\r\n    this.retrieveNotificaciones();\r\n}\r\n    \r\nretrieveNotificaciones(){\r\n    PrincipalService.getNotificacion()\r\n    .then(response => {\r\n        this.setState({\r\n            notificaciones: response.data\r\n        });\r\n        console.log(response.data)\r\n    })\r\n    .catch(e => {\r\n        console.log(e);\r\n    });\r\n}\r\n   \r\n    render() {\r\n        const {notificaciones} = this.state;\r\n\r\n        return (\r\n            <main>\r\n               <div class=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n                <strong>¬°Fecha l√≠mite cerca!</strong>\r\n                                    {notificaciones && notificaciones.map((notificacion) => (\r\n                                        {notificacion}                                        \r\n                                    ))} \r\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                </div>\r\n\r\n            <main role=\"main\" class=\"inner cover\" id=\"central\" >\r\n                <main>\r\n                    <h1 class=\"cover-heading\">Una empresa que vende ripio.</h1>\r\n                    <p class=\"lead\">Vendemos un par de cosas mas, pero tambien tenemos ripio.</p>\r\n                </main>\r\n            </main>          \r\n            </main>\r\n        \r\n          );\r\n      }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport AuthService from \"../services/auth.service\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      loading: false,\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  handleLogin(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      loading: true\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      AuthService.login(this.state.username, this.state.password).then(\r\n        () => {\r\n          this.props.history.push(\"/profile\");\r\n          window.location.reload();\r\n        },\r\n        error => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          this.setState({\r\n            loading: false,\r\n            message: resMessage\r\n          });\r\n        }\r\n      );\r\n    } else {\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const divStyle = {\r\n        color: 'black'\r\n      };\r\n    return (\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card card-container\">\r\n          <img\r\n            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\r\n            alt=\"profile-img\"\r\n            className=\"profile-img-card\"\r\n          />\r\n\r\n          <Form\r\n            onSubmit={this.handleLogin}\r\n            ref={c => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label style={divStyle} htmlFor=\"username\">Nombre de usuario</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"username\"\r\n                value={this.state.username}\r\n                onChange={this.onChangeUsername}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label style={divStyle} htmlFor=\"password\">Contrase√±a</label>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                name=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.onChangePassword}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button\r\n                className=\"btn btn-primary btn-block\"\r\n                disabled={this.state.loading}\r\n              >\r\n                {this.state.loading && (\r\n                  <span className=\"spinner-border spinner-border-sm\"></span>\r\n                )}\r\n                <span>Iniciar sesion</span>\r\n              </button>\r\n            </div>\r\n\r\n            {this.state.message && (\r\n              <div className=\"form-group\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                  {this.state.message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={c => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport './App.css';\r\nimport AuthService from \"./services/auth.service\";\r\nimport { Link, Switch, Route } from \"react-router-dom\";\r\nimport ProductList from './components/servicios.component'\r\nimport PrincipalPage from \"./components/principal.component\";\r\nimport Login from \"./components/login.component\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showServicios: false,\r\n      showPrincipal: false\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const user = AuthService.getCurrentUser();\r\n  }\r\n  if (user) {\r\n    this.setState({\r\n      showServicios: user,\r\n      showPrincipal: user\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const { showPrincipal, showServicios } = this.state;\r\n      return (\r\n        \r\n      <div class= \"text-center\">\r\n        <div class=\"cover-container d-flex h-100 p-3 mx flex-column\">\r\n          <header class=\"masthead mb\">\r\n                  <div class=\"inner\">\r\n                  <h4 class=\"masthead-brand \">\r\n                    <a href=\"/principal\" className=\"navbar-brand\">\r\n                         Corralon Nak\r\n                    </a>\r\n                    </h4>\r\n                    <nav class=\"nav nav-masthead justify-content-center\">\r\n                    {showPrincipal && (\r\n                       <a class=\"nav-link active\">\r\n                          <Link to={\"/principal\"}>\r\n                              Principal\r\n                         </Link>\r\n                       </a>\r\n                    )}\r\n                    {showServicios && (\r\n                        <a class=\"nav-link active\">\r\n                          <Link to={\"/servicios\"}>\r\n                              Servicios\r\n                          </Link>\r\n                       </a>\r\n                    )}\r\n                  </nav>\r\n                  </div>\r\n              </header>        \r\n          <div className=\"container mt-3\">\r\n            <Switch>\r\n              <Route exact path={[\"/servicios\"]} component={ProductList} />\r\n              <Route exact path={[\"/principal\"]} component={PrincipalPage} />\r\n              <Route exact path={[\"/\", \"/login\" ]}component={Login} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}